# Makefile for HiKey OP-TEE/AOSP
#
# 'make help' for details

SHELL = /bin/bash
CURL = wget

ifeq ($(V),1)
  Q :=
  ECHO := @:
else
  Q := @
  ECHO := @echo
endif

# Non-secure user mode (binaries added to root fs): 32 or 64-bit
NSU ?= 64
# Secure kernel (OP-TEE OS): 32 or 64bit
SK ?= 64

.PHONY: _all
_all:
	$(Q)$(MAKE) all $(filter-out _all,$(MAKECMDGOALS))

PTABLE-IMG = downloads/ptable-aosp.img
NVME-IMG = downloads/nvme.img

BOOT-IMG = downloads/boot_fat.uefi.img
CACHE-IMG = downloads/cache.img
USERDATA-IMG = downloads/userdata.img
SYSTEM-IMG = downloads/system.img

images = $(NVME-IMG) $(PTABLE-IMG) $(BOOT-IMG) $(SYSTEM-IMG) $(CACHE-IMG) $(USERDATA-IMG)
compressed-images = downloads/boot_fat.uefi.img.tar.xz \
		downloads/cache.img.tar.xz \
		downloads/system.img.tar.xz \
		downloads/userdata.img.tar.xz

all: build-lloader build-fip build-optee-client build-optee-linuxdriver build-optee-test
all: build-aes-perf build-sha-perf
all: $(SYSTEM-IMG) $(NVME-IMG) $(PTABLE-IMG) $(BOOT-IMG) $(CACHE-IMG) $(USERDATA-IMG)

clean: clean-bl1-bl2-bl31-fip clean-bl33 clean-lloader-ptable
clean: clean-linux-dtb 
clean: clean-optee-client clean-bl32 clean-aes-perf clean-sha-perf

cleaner: clean cleaner-aarch64-gcc cleaner-arm-gcc

distclean: cleaner distclean-aarch64-gcc distclean-arm-gcc

help:
	@echo "Makefile for OP-TEE for HiKey with AOSP"
	@echo
	@echo "- Run 'make' to build or download all the necessary files"
	@echo "- Use 'make flash' to upload the pre-built files to the board."
	@echo "   You must first enable recovery mode. Set J15 pins as follows: "
	@echo "    1-2 closed 3-4 closed 5-6 open"
	@echo "  and power-cycle the board."
	@echo "  Once flashing is complete, switch back to normal mode (boot"
	@echo "  from eMMC) by setting J15 pins as follows"
	@echo "    1-2 closed 3-4 open 5-6 open"
	@echo "  then power-cycle the board."
	@echo "- Use 'make install' to upload the TEE client/driver files to the"
	@echo "  board using 'adb push'. The board must be booted, obviously."
	@echo "- Other useful targets are:"
	@echo "  build-lloader: build $(LLOADER), contains:"
	@echo "      [build-bl1: build $(BL1)]"
	@echo "      [l-loader/*.S]"
	@echo "  build-fip: build $(FIP), contains:"
	@echo "      [build-bl2: build $(BL2)]"
	@echo "      [build-bl30: build $(BL30)]"
	@echo "      [build-bl31: build $(BL31)]"
	@echo "      [build-bL32: build $(BL32)]"
	@echo "      [build-bl33: build $(BL33)]"
	@echo "  build-ptable-img:   download $(PTABLE-IMG)"
	@echo "  build-nvme-img:     download $(NVME-IMG)"
	@echo "  build-boot-img:     download $(BOOT-IMG)"
	@echo "  build-system-img:   download $(SYSTEM-IMG)"
	@echo "  build-userdata-img: download $(USERDATA-IMG)"
	@echo "  build-system-img:   download $(SYSTEM-IMG)"
	@echo "  build-optee-linuxdriver: build $(optee-linuxdriver-files)"
	@echo "  build-optee-client: build optee_client/out/libteec.so*" \
	                 "optee_client/out/tee-supplicant/tee-supplicant]"
	@echo "  build-optee-test:   build optee_test/out/xtest/xtest" \
	                 "optee_test/out/ta/.../*.ta]"
	@echo "Note about dependencies: In order to speed up the build and"
	@echo "reduce output when working on a single component, build-<foo>"
	@echo "will NOT invoke build-<bar> automatically."
	@echo "Therefore, if you want to make sure that <bar> is up-to-date,"
	@echo "use 'make build-<foo> build-<bar>'."
	@echo "Plain 'make' or 'make all' do check all dependencies, however."
	@echo "- 'make clean' removes most files generated by make, except the"
	@echo "downloaded files/tarballs and the directories they were extracted to."
	@echo "- 'make cleaner' also removes tar directories and downloaded images (*.img)"
	@echo "- 'make distclean' removes all generated or downloaded files."
	@echo
	@echo "Use 'make SK=32' for 32-bit secure kernel (OP-TEE OS) [default 64]"

ifneq (,$(shell which ccache))
CCACHE = ccache # do not remove this comment or the trailing space will go
endif

filename = $(lastword $(subst /, ,$(1)))

#
# Aarch64 toolchain
#
AARCH64_GCC_URL = https://releases.linaro.org/14.09/components/toolchain/binaries/gcc-linaro-aarch64-linux-gnu-4.9-2014.09_linux.tar.xz
AARCH64_GCC_TARBALL = $(call filename,$(AARCH64_GCC_URL))
AARCH64_GCC_DIR = $(AARCH64_GCC_TARBALL:.tar.xz=)
aarch64-linux-gnu-gcc := toolchains/$(AARCH64_GCC_DIR)
export CROSS_COMPILE ?= $(CCACHE)$(PWD)/toolchains/$(AARCH64_GCC_DIR)/bin/aarch64-linux-gnu-

#
# Aarch32 toolchain
#
ARM_GCC_URL = https://releases.linaro.org/14.09/components/toolchain/binaries/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.xz
ARM_GCC_TARBALL = $(call filename,$(ARM_GCC_URL))
ARM_GCC_DIR = $(ARM_GCC_TARBALL:.tar.xz=)
arm-linux-gnueabihf-gcc := toolchains/$(ARM_GCC_DIR)
CROSS_COMPILE32 ?= $(CCACHE)$(PWD)/toolchains/$(ARM_GCC_DIR)/bin/arm-linux-gnueabihf-

#
# Android NDK
#
NDK_URL = http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin
NDK_TARBALL = $(call filename,$(NDK_URL))
NDK_DIR = android-ndk-r10e
NDK-BUILD = toolchains/android-ndk-r10e/ndk-build
ndk = toolchains/$(NDK_DIR)

ifeq ($(NSU),64)
CROSS_COMPILE_NSU := $(CROSS_COMPILE)
else
CROSS_COMPILE_NSU := $(CROSS_COMPILE32)
endif

#
# Download rules for toolchains
#

downloads/$(AARCH64_GCC_TARBALL):
	$(ECHO) '  CURL    $@'
	$(Q)$(CURL) $(AARCH64_GCC_URL) -O $@

toolchains/$(AARCH64_GCC_DIR): downloads/$(AARCH64_GCC_TARBALL)
	$(ECHO) '  TAR     $@'
	$(Q)rm -rf toolchains/$(AARCH64_GCC_DIR)
	$(Q)cd toolchains && tar xf ../downloads/$(AARCH64_GCC_TARBALL)
	$(Q)touch $@

cleaner-aarch64-gcc:
	$(ECHO) '  CLEANER $@'
	$(Q)rm -rf toolchains/$(AARCH64_GCC_DIR)

distclean-aarch64-gcc:
	$(ECHO) '  DISTCL  $@'
	$(Q)rm -f downloads/$(AARCH64_GCC_TARBALL)

downloads/$(ARM_GCC_TARBALL):
	$(ECHO) '  CURL    $@'
	$(Q)$(CURL) $(ARM_GCC_URL) -O $@

toolchains/$(ARM_GCC_DIR): downloads/$(ARM_GCC_TARBALL)
	$(ECHO) '  TAR     $@'
	$(Q)rm -rf toolchains/$(ARM_GCC_DIR)
	$(Q)cd toolchains && tar xf ../downloads/$(ARM_GCC_TARBALL)
	$(Q)touch $@

cleaner-arm-gcc:
	$(ECHO) '  CLEANER $@'
	$(Q)rm -rf toolchains/$(ARM_GCC_DIR)

distclean-arm-gcc:
	$(ECHO) '  DISTCL  $@'
	$(Q)rm -f downloads/$(ARM_GCC_TARBALL)

downloads/$(NDK_TARBALL):
	$(ECHO) '  CURL    $@'
	$(Q)$(CURL) $(NDK_URL) -O $@
	$(ECHO) '  CHMOD   $@'
	$(Q)chmod +x $@

toolchains/$(NDK_DIR): downloads/$(NDK_TARBALL)
	$(ECHO) '  EXTRACT $@'
	$(Q)rm -rf $@
	$(Q)cd toolchains && ../downloads/$(NDK_TARBALL) >/dev/null
	$(Q)touch $@

cleaner-ndk:
	$(ECHO) '  CLEANER $@'
	$(Q)rm -rf toolchains/$(NDK_DIR)

distclean-ndk:
	$(ECHO) '  DISTCL  $@'
	$(Q)rm -f downloads/$(NDK_TARBALL)

cleaner: cleaner-ndk

distclean: distclean-ndk

#
# UEFI
#

EDK2_DEBUG = 0
ifeq ($(EDK2_DEBUG),1)
EDK2_DEB_REL=DEBUG
else
EDK2_DEB_REL=RELEASE
endif

BL33 = edk2/Build/HiKey/$(EDK2_DEB_REL)_GCC49/FV/BL33_AP_UEFI.fd
EDK2_VARS := EDK2_ARCH=AARCH64 EDK2_DSC=HisiPkg/HiKeyPkg/HiKey.dsc EDK2_TOOLCHAIN=GCC49 EDK2_BUILD=$(EDK2_DEB_REL)
# Tell EDK2 to use UART0 for console I/O (defaults to UART3)
EDK2_VARS += EDK2_MACROS="-DSERIAL_BASE=0xF8015000"

.PHONY: build-bl33
build-bl33:: $(aarch64-linux-gnu-gcc)
build-bl33 $(BL33):: .edk2basetools
	$(ECHO) '  BUILD   build-bl33'
	$(Q)set -e ; cd edk2 ; export GCC49_AARCH64_PREFIX='"$(CROSS_COMPILE)"' ; \
	    . edksetup.sh ; \
	    $(MAKE) -j1 -f HisiPkg/HiKeyPkg/Makefile $(EDK2_VARS)
	$(Q)touch ${BL33}

clean-bl33: clean-edk2-basetools
	$(ECHO) '  CLEAN   $@'
	$(Q)set -e ; cd edk2 ; . edksetup.sh ; \
	    $(MAKE) -f HisiPkg/HiKeyPkg/Makefile $(EDK2_VARS) clean

.edk2basetools:
	$(ECHO) '  BUILD   edk2/BaseTools'
	$(Q)set -e ; cd edk2 ; . edksetup.sh ; \
	    $(MAKE) -j1 -C BaseTools CC="$(CCACHE)gcc" CXX="$(CCACHE)g++"
	$(Q)touch $@

clean-edk2-basetools:
	$(ECHO) '  CLEAN   $@'
	$(Q)set -e ; cd edk2 ; . edksetup.sh ; \
	    $(MAKE) -C BaseTools clean
	$(Q)rm -f .edk2basetools

#
# ARM Trusted Firmware
#

ATF_DEBUG = 0
ifeq ($(ATF_DEBUG),1)
ATF = arm-trusted-firmware/build/hikey/debug
else
ATF = arm-trusted-firmware/build/hikey/release
endif
BL1 = $(ATF)/bl1.bin
BL2 = $(ATF)/bl2.bin
BL30 = edk2/HisiPkg/HiKeyPkg/NonFree/mcuimage.bin
BL31 = $(ATF)/bl31.bin
# Comment out to not include OP-TEE OS image in fip.bin
BL32 = optee_os/out/arm-plat-hikey/core/tee.bin
FIP = $(ATF)/fip.bin

ARMTF_FLAGS := PLAT=hikey DEBUG=$(ATF_DEBUG)
# TF console now defaults to UART3 (on the low-speed header connector).
# The following line selects UART0 (the unpopulated pads next to J15),
# which is also used by the boot ROM.
ARMTF_FLAGS += CONSOLE_BASE=PL011_UART0_BASE CRASH_CONSOLE_BASE=PL011_UART0_BASE
#ARMTF_FLAGS += LOG_LEVEL=40
ARMTF_EXPORTS := BL30=$(PWD)/$(BL30) BL33=$(PWD)/$(BL33) #CFLAGS=""
ifneq (,$(BL32))
ARMTF_FLAGS += SPD=opteed
ARMTF_EXPORTS += BL32=$(PWD)/$(BL32)
endif

define arm-tf-make
        $(ECHO) '  BUILD   build-$(strip $(1)) [$@]'
        +$(Q)export $(ARMTF_EXPORTS) ; \
	    $(MAKE) -C arm-trusted-firmware $(ARMTF_FLAGS) $(1)
endef

.PHONY: build-bl1
build-bl1 $(BL1): $(aarch64-linux-gnu-gcc)
	$(call arm-tf-make, bl1)

.PHONY: build-bl2
build-bl2 $(BL2): $(aarch64-linux-gnu-gcc)
	$(call arm-tf-make, bl2)

.PHONY: build-bl31
build-bl31 $(BL31): $(aarch64-linux-gnu-gcc)
	$(call arm-tf-make, bl31)


ifneq ($(filter all build-bl2,$(MAKECMDGOALS)),)
tf-deps += build-bl2
endif
ifneq ($(filter all build-bl31,$(MAKECMDGOALS)),)
tf-deps += build-bl31
endif
ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
tf-deps += build-bl32
endif
ifneq ($(filter all build-bl33,$(MAKECMDGOALS)),)
tf-deps += build-bl33
endif

.PHONY: build-fip
build-fip:: $(tf-deps)
build-fip $(FIP)::
	$(call arm-tf-make, fip)

clean-bl1-bl2-bl31-fip:
	$(ECHO) '  CLEAN   edk2/BaseTools'
	$(Q)export $(ARMTF_EXPORTS) ; \
	    $(MAKE) -C arm-trusted-firmware $(ARMTF_FLAGS) clean

#
# l-loader
#

LLOADER = l-loader/l-loader.bin

ifneq ($(filter all build-bl1,$(MAKECMDGOALS)),)
lloader-deps += build-bl1
endif

# FIXME: adding $(BL1) as a dependency [after $(LLOADER)::] breaks
# parallel build (-j) because the same rule is run twice simultaneously
# $ make -j9 build-bl1 build-lloader
#   BUILD   build-bl1 # $@ = build-bl1
#   BUILD   build-bl1 # $@ = arm-trusted-firmware/build/.../bl1.bin
# make[1]: Entering directory '/home/jerome/work/hikey_uefi/arm-trusted-firmware'
# make[1]: Entering directory '/home/jerome/work/hikey_uefi/arm-trusted-firmware'
#   DEPS    build/hikey/debug/bl31/bl31.ld.d
#   DEPS    build/hikey/debug/bl31/bl31.ld.d
.PHONY: build-lloader
build-lloader:: $(arm-linux-gnueabihf-gcc) $(lloader-deps)
build-lloader $(LLOADER)::
	$(ECHO) '  BUILD   build-lloader'
	$(Q)$(MAKE) -C l-loader BL1=$(PWD)/$(BL1) CROSS_COMPILE="$(CROSS_COMPILE32)" l-loader.bin

build-ptable $(PTABLE):
	$(ECHO) '  BUILD   build-ptable'
	$(Q)$(MAKE) -C l-loader ptable.img

clean-lloader-ptable:
	$(ECHO) '  CLEAN   $@'
	$(Q)$(MAKE) -C l-loader clean

#
# Linux/DTB
#

LINUX = linux/arch/arm64/boot/Image
DTB = linux/arch/arm64/boot/dts/hi6220-hikey.dtb
# Config fragments to merge with the default kernel configuration
KCONFIGS += kernel_config/dmabuf.conf
#KCONFIGS += kernel_config/usb_net_dm9601.conf
#KCONFIGS += kernel_config/ftrace.conf

linux-flags := ARCH=arm64 LOCALVERSION= EXTRAVERSION=+ CONFIG_DEBUG_SECTION_MISMATCH=y

.PHONY: build-linux
build-linux:: $(aarch64-linux-gnu-gcc)
build-linux $(LINUX):: linux/.config
	$(ECHO) '  BUILD   build-linux'
	$(Q)flock .linuxbuildinprogress $(MAKE) -C linux $(linux-flags) Image

build-dtb:: $(aarch64-linux-gnu-gcc)
build-dtb $(DTB):: linux/.config
	$(ECHO) '  BUILD   build-dtb'
	$(Q)flock .linuxbuildinprogress $(MAKE) -C linux $(linux-flags) dtbs

linux/.config: downloads/aosp_kernel_config $(KCONFIGS)
	$(ECHO) '  BUILD   $@'
	$(Q)cd linux && ARCH=arm64 scripts/kconfig/merge_config.sh \
	  ../downloads/aosp_kernel_config $(patsubst %,../%,$(KCONFIGS))

linux/usr/gen_init_cpio: linux/.config
	$(ECHO) '  BUILD   $@'
	$(Q)$(MAKE) -C linux/usr ARCH=arm64 gen_init_cpio

clean-linux-dtb:
	$(ECHO) '  CLEAN   $@'
	$(Q)$(MAKE) -C linux $(linux-flags) clean
	$(Q)rm -f linux/.config
	$(Q)rm -f .linuxbuildinprogress

#
# Downloads from Linaro snapshots
#

define make-dl-rule
$(1):
	$(ECHO) '  CURL    $(1)'
	$(Q)$(CURL) $(2)/$(notdir $(1)) -O $(1)

cleaner-$(1):
	$(ECHO) '  RM      $(1)'
	$(Q)rm -f $(1)

cleaner: cleaner-$(1)
endef

SNAP_UEFI_URL = https://builds.96boards.org/snapshots/hikey/linaro/uefi/75

$(eval $(call make-dl-rule,$(PTABLE-IMG),$(SNAP_UEFI_URL)))
$(eval $(call make-dl-rule,$(NVME-IMG),$(SNAP_UEFI_URL)))

SNAP_AOSP_URL = https://builds.96boards.org/snapshots/hikey/linaro/aosp/185

$(eval $(call make-dl-rule,$(BOOT-IMG).tar.xz,$(SNAP_AOSP_URL)))
$(eval $(call make-dl-rule,$(CACHE-IMG).tar.xz,$(SNAP_AOSP_URL)))
$(eval $(call make-dl-rule,$(USERDATA-IMG).tar.xz,$(SNAP_AOSP_URL)))

downloads/system.img.tar.xz:
	@echo ==========
	@echo "$@ cannot be downloaded automatically because it is protected"
	@echo "by a license agreement."
	@echo "Please copy/paste the following URL in a web browser to get it:"
	@echo "  $(SNAP_AOSP_URL)/$(notdir $@)"
	@echo ==========
	@false

downloads/%.img: downloads/%.img.tar.xz
	$(ECHO) '  TAR     $@'
	$(Q)tar xf $< -C downloads
	$(Q)touch $@

build-images: $(images)

downloads/aosp_kernel_config:
	$(ECHO) '  CURL    $@'
	$(Q)$(CURL) $(SNAP_AOSP_URL)/kernel_config -O $@

cleaner-aosp-kernel-config:
	$(ECHO) '  RM      downloads/aosp_kernel_config'
	$(Q)rm -f downloads/aosp_kernel_config

cleaner: cleaner-img cleaner-aosp-kernel-config

cleaner-images: clean-images
	$(ECHO) '  RM      $(compressed-images)'
	$(Q)rm -f $(compressed-images)

strip-tar-xz = $(subst .tar.xz,,$(1))

clean-images:
	$(ECHO) '  RM      $(call strip-tar-xz,$(compressed-images))' 
	$(Q)rm -f $(call strip-tar-xz,$(compressed-images))

clean: clean-images

#
# OP-TEE Linux driver
#

optee-linuxdriver-files := optee_linuxdriver/optee.ko \
                           optee_linuxdriver/optee_armtz.ko

ifneq ($(filter all build-linux,$(MAKECMDGOALS)),)
optee-linuxdriver-deps += build-linux
endif

.PHONY: build-optee-linuxdriver
build-optee-linuxdriver:: $(optee-linuxdriver-deps)
build-optee-linuxdriver $(optee-linuxdriver-files):: $(nsk-gcc)
	$(ECHO) '  BUILD   build-optee-linuxdriver'
	$(Q)$(MAKE) -C linux \
	   ARCH=arm64 \
	   LOCALVERSION= \
	   M=../optee_linuxdriver \
	   modules

clean-optee-linuxdriver:
	$(ECHO) '  CLEAN   $@'
	$(Q)$(MAKE) -C linux \
	   ARCH=arm64 \
	   LOCALVERSION= \
	   M=../optee_linuxdriver \
	   clean

#
# OP-TEE client library and tee-supplicant executable
#

optee-client-flags := APP_BUILD_SCRIPT=Android.mk NDK_PROJECT_PATH=. APP_ABI=arm64-v8a
#optee-client-flags += CFG_TEE_SUPP_LOG_LEVEL=3

.PHONY: build-optee-client
build-optee-client: $(ndk)
	$(ECHO) '  BUILD   $@'
	+$(Q)$(NDK-BUILD) -C optee_client $(optee-client-flags)

clean-optee-client:
	$(ECHO) '  CLEAN   $@'
	+$(Q)$(NDK-BUILD) -C optee_client $(optee-client-flags) clean

#
# OP-TEE OS
#

optee-os-flags := CROSS_COMPILE="$(CROSS_COMPILE32)" PLATFORM=hikey
optee-os-flags += DEBUG=0
optee-os-flags += CFG_TEE_CORE_LOG_LEVEL=2 # 0=none 1=err 2=info 3=debug 4=flow
optee-os-flags += CFG_CONSOLE_UART=0
#optee-os-flags += CFG_TEE_TA_LOG_LEVEL=3
#optee-os-flags += CFG_WITH_PAGER=y

# 64-bit TEE Core
# FIXME: Compiler bug? xtest 4002 hangs (endless loop) when:
# - TEE Core is 64-bit and compiler is aarch64-linux-gnu-gcc
#   4.9.2-10ubuntu13, and
# - DEBUG=0, and
# - 32-bit user libraries are built with arm-linux-gnueabihf-gcc 4.9.2-10ubuntu10
# Set DEBUG=1, or set $(arm-linux-gnueabihf-) to build user code with:
#   'arm-linux-gnueabihf-gcc (crosstool-NG linaro-1.13.1-4.8-2013.08 - Linaro GCC 2013.08)
#    4.8.2 20130805 (prerelease)'
# or with:
#   'arm-linux-gnueabihf-gcc (Linaro GCC 2014.11) 4.9.3 20141031 (prerelease)'
# and the problem disappears.
ifeq ($(SK),64)
optee-os-flags += CFG_ARM64_core=y CROSS_COMPILE_core="$(CROSS_COMPILE)" CROSS_COMPILE_ta_arm64="$(CROSS_COMPILE)"
endif

.PHONY: build-bl32
build-bl32:: $(aarch64-linux-gnu-gcc) $(arm-linux-gnueabihf-gcc)
build-bl32::
	$(ECHO) '  BUILD   $@'
	$(Q)$(MAKE) -C optee_os $(optee-os-flags)

.PHONY: clean-bl32
clean-bl32:
	$(ECHO) '  CLEAN   $@'
	$(Q)$(MAKE) -C optee_os $(optee-os-flags) clean


#
# OP-TEE tests (xtest)
#

# To build with GlobalPlatform tests ("extended xtest"), just extract
# TEE_Initial_Configuration-Test_Suite_v1_1_0_4-2014_11_07.7z under optee_test.
#
# NOTE: If you have built with GlobalPlatform tests and later remove them
# (or force GP_TESTS=0), you will need to clean the repository:
#   cd optee_test ; git reset --hard HEAD
ifneq (,$(wildcard optee_test/TEE_Initial_Configuration-Test_Suite_v1_1_0_4-2014_11_07))
GP_TESTS := 1
endif

ifeq ($(GP_TESTS),1)
optee-test-common-flags += CFG_GP_PACKAGE_PATH=$(PWD)/optee_test/TEE_Initial_Configuration-Test_Suite_v1_1_0_4-2014_11_07
ifeq ($(NSU),32)
optee-test-common-flags += CFG_ARM32=y
endif
endif

# TODO: now that OP-TEE supports 32- and 64-bit TAs, make it configurable
optee-test-ta-flags := CROSS_COMPILE_TA="$(CROSS_COMPILE32)" \
		    TA_DEV_KIT_DIR=$(PWD)/optee_os/out/arm-plat-hikey/export-ta_arm32 \
		    O=$(PWD)/optee_test/out #CFG_TEE_TA_LOG_LEVEL=3

ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
optee-test-ta-deps += build-bl32
endif
ifeq ($(GP_TESTS),1)
optee-test-ta-deps += optee-test-do-patch
endif

.PHONY: build-optee-test-ta
build-optee-test-ta:: $(optee-test-ta-deps)
build-optee-test-ta:: $(arm-linux-gnueabihf-gcc)
	$(ECHO) '  BUILD   $@'
	$(Q)$(MAKE) -C optee_test $(optee-test-common-flags) $(optee-test-ta-flags) ta

clean-optee-test-ta:
	$(ECHO) '  CLEAN   $@'
	$(Q)rm -rf optee_test/out/ta

optee-test-host-flags := APP_BUILD_SCRIPT=Android.mk NDK_PROJECT_PATH=. APP_ABI=arm64-v8a \
			 TA_DEV_KIT_DIR=$(PWD)/optee_os/out/arm-plat-hikey/export-ta_arm32

ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
optee-test-host-deps += build-bl32
endif
ifneq ($(filter all build-optee-client,$(MAKECMDGOALS)),)
optee-test-host-deps += build-optee-client
endif
ifeq ($(GP_TESTS),1)
optee-test-host-deps += optee-test-do-patch
endif

.PHONY: build-optee-test-host
build-optee-test-host:: $(optee-test-host-deps)
build-optee-test-host:: $(ndk)
	$(ECHO) '  BUILD   $@'
	+$(Q)$(NDK-BUILD) -C optee_test $(optee-test-common-flags) $(optee-test-host-flags)

clean-optee-test-host:
	$(ECHO) '  CLEAN   $@'
	$(Q)rm -rf optee_test/libs optee_test/obj

.PHONY: optee-test-do-patch
optee-test-do-patch:
	$(Q)$(MAKE) -C optee_test $(optee-test-common-flags) patch

build-optee-test: build-optee-test-host build-optee-test-ta

clean-optee-test: clean-optee-test-host clean-optee-test-ta

#
# aes-perf (AES crypto performance test)
#

aes-perf-ta-flags := CROSS_COMPILE_TA="$(CROSS_COMPILE32)" \
		     TA_DEV_KIT_DIR=$(PWD)/optee_os/out/arm-plat-hikey/export-ta_arm32

ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
aes-perf-ta-deps += build-bl32
endif

.PHONY: build-aes-perf-ta
build-aes-perf-ta:: $(aes-perf-ta-deps)
build-aes-perf-ta:: $(arm-linux-gnueabihf-gcc)
	$(ECHO) '  BUILD   $@'
	$(Q)$(MAKE) -C aes-perf $(aes-perf-ta-flags) ta

clean-aes-perf-ta:
	$(ECHO) '  CLEAN   $@'
	$(Q)rm -rf aes-perf/out/ta

aes-perf-host-flags := APP_BUILD_SCRIPT=Android.mk NDK_PROJECT_PATH=. APP_ABI=arm64-v8a

ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
aes-perf-host-deps += build-bl32
endif
ifneq ($(filter all build-optee-client,$(MAKECMDGOALS)),)
aes-perf-host-deps += build-optee-client
endif

.PHONY: build-aes-perf-host
build-aes-perf-host:: $(aes-perf-host-deps)
build-aes-perf-host:: $(ndk)
	$(ECHO) '  BUILD   $@'
	+$(Q)$(NDK-BUILD) -C aes-perf $(aes-perf-host-flags)

clean-aes-perf-host:
	$(ECHO) '  CLEAN   $@'
	$(Q)rm -rf aes-perf/libs aes-perf/obj

build-aes-perf: build-aes-perf-host build-aes-perf-ta

clean-aes-perf: clean-aes-perf-host clean-aes-perf-ta

#
# sha-perf (SHA performance test)
#

sha-perf-ta-flags := CROSS_COMPILE_TA="$(CROSS_COMPILE32)" \
		     TA_DEV_KIT_DIR=$(PWD)/optee_os/out/arm-plat-hikey/export-ta_arm32

ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
sha-perf-ta-deps += build-bl32
endif

.PHONY: build-sha-perf-ta
build-sha-perf-ta:: $(sha-perf-ta-deps)
build-sha-perf-ta:: $(arm-linux-gnueabihf-gcc)
	$(ECHO) '  BUILD   $@'
	$(Q)$(MAKE) -C sha-perf $(sha-perf-ta-flags) ta

clean-sha-perf-ta:
	$(ECHO) '  CLEAN   $@'
	$(Q)rm -rf sha-perf/out/ta

sha-perf-host-flags := APP_BUILD_SCRIPT=Android.mk NDK_PROJECT_PATH=. APP_ABI=arm64-v8a

ifneq ($(filter all build-bl32,$(MAKECMDGOALS)),)
sha-perf-host-deps += build-bl32
endif
ifneq ($(filter all build-optee-client,$(MAKECMDGOALS)),)
sha-perf-host-deps += build-optee-client
endif

.PHONY: build-sha-perf-host
build-sha-perf-host:: $(sha-perf-host-deps)
build-sha-perf-host:: $(ndk)
	$(ECHO) '  BUILD   $@'
	+$(Q)$(NDK-BUILD) -C sha-perf $(sha-perf-host-flags)

clean-sha-perf-host:
	$(ECHO) '  CLEAN   $@'
	$(Q)rm -rf sha-perf/libs sha-perf/obj

build-sha-perf: build-sha-perf-host build-sha-perf-ta

clean-sha-perf: clean-sha-perf-host clean-sha-perf-ta

#
# Flash targets
#

flash:: flash-lloader
flash:: flash-ptable
flash:: flash-fip
flash:: flash-nvme
flash:: flash-boot
flash:: flash-system
flash:: flash-cache
flash:: flash-userdata

flash-lloader:
	$(ECHO) '  LLOADER'
	$(Q)sudo python burn-boot/hisi-idt.py --img1=$(LLOADER)

define flash
	$(ECHO) '  FLASH   $(1)'
	$(Q)fastboot flash $(1) $(2)
endef

flash-ptable:
	$(call flash,ptable,$(PTABLE-IMG))

flash-fip:
	$(call flash,fastboot,$(FIP))

flash-nvme:
	$(call flash,nvme,$(NVME-IMG))

flash-boot:
	$(call flash,boot,$(BOOT-IMG))

flash-system:
	$(call flash,system,$(SYSTEM-IMG))

flash-cache:
	$(call flash,cache,$(CACHE-IMG))

flash-userdata:
	$(call flash,userdata,$(USERDATA-IMG))

#
# Install locally compiled binaries onto the board
#

define add-dir
	$(ECHO) '  MKDIR   <target>$(1)'
	$(Q)adb shell mkdir -p $(1)
endef

define add-file
	$(ECHO) '  INSTALL <target>$(1)'
	$(Q)adb push $(2) $(1)
	$(Q)adb shell chmod $(3) $(1)
endef

define add-link
	$(ECHO) '  LN      <target>$(1)'
	$(Q)adb shell ln -sf $(2) $(1)
endef

ifneq ($(filter all build-optee-linuxdriver,$(MAKECMDGOALS)),)
install-deps += build-optee-linuxdriver
endif
ifneq ($(filter all build-optee-test,$(MAKECMDGOALS)),)
install-deps += build-optee-test
endif
ifneq ($(filter all build-aes-perf,$(MAKECMDGOALS)),)
install-deps += build-aes-perf
endif
ifneq ($(filter all build-sha-perf,$(MAKECMDGOALS)),)
install-deps += build-sha-perf
endif

install:: $(install-deps)
install:: install-optee-client install-optee-linuxdriver install-aes-perf install-sha-perf
install:: install-optee-test

adb-init:
	$(ECHO) '  ADBROOT'
	$(Q)sudo adb root && sleep 2
	$(ECHO) '  REMOUNT <target>/system'
	$(Q)adb shell mount -o remount,rw /system

install-optee-client: | adb-init
	$(call add-dir,/system/bin,755)
	$(call add-file,/system/bin/tee-supplicant,optee_client/libs/arm64-v8a/tee-supplicant,755)
	$(call add-dir,/system/lib64)
	$(call add-file,/system/lib64/libteec.so,optee_client/libs/arm64-v8a/libteec.so,644)

install-optee-linuxdriver: | adb-init
	$(call add-dir,/system/modules)
	$(call add-file,/system/modules/optee.ko,optee_linuxdriver/core/optee.ko,755)
	$(call add-file,/system/modules/optee_armtz.ko,optee_linuxdriver/armtz/optee_armtz.ko,755)

# FIXME client apps must be built with ndk-build
install-optee-test: | adb-init
	$(call add-file,/system/bin/xtest,optee_test/libs/arm64-v8a/xtest,755)
	$(call add-dir,/system/lib/optee_armtz,755)
	$(call add-file,/system/lib/optee_armtz/d17f73a0-36ef-11e1-984a0002a5d5c51b.ta,optee_test/out/ta/rpc_test/d17f73a0-36ef-11e1-984a0002a5d5c51b.ta,444)
	$(call add-file,/system/lib/optee_armtz/cb3e5ba0-adf1-11e0-998b0002a5d5c51b.ta,optee_test/out/ta/crypt/cb3e5ba0-adf1-11e0-998b0002a5d5c51b.ta,444)
	$(call add-file,/system/lib/optee_armtz/b689f2a7-8adf-477a-9f9932e90c0ad0a2.ta,optee_test/out/ta/storage/b689f2a7-8adf-477a-9f9932e90c0ad0a2.ta,444)
	$(call add-file,/system/lib/optee_armtz/5b9e0e40-2636-11e1-ad9e0002a5d5c51b.ta,optee_test/out/ta/os_test/5b9e0e40-2636-11e1-ad9e0002a5d5c51b.ta,444)
	$(call add-file,/system/lib/optee_armtz/c3f6e2c0-3548-11e1-b86c0800200c9a66.ta,optee_test/out/ta/create_fail_test/c3f6e2c0-3548-11e1-b86c0800200c9a66.ta,444)
	$(call add-file,/system/lib/optee_armtz/e6a33ed4-562b-463a-bb7eff5e15a493c8.ta,optee_test/out/ta/sims/e6a33ed4-562b-463a-bb7eff5e15a493c8.ta,444)
	$(call add-file,/system/lib/optee_armtz/e13010e0-2ae1-11e5-896a0002a5d5c51b.ta,optee_test/out/ta/concurrent/e13010e0-2ae1-11e5-896a0002a5d5c51b.ta,444)
	$(call add-file,/system/lib/optee_armtz/f157cda0-550c-11e5-a6fa0002a5d5c51b.ta,optee_test/out/ta/storage_benchmark/f157cda0-550c-11e5-a6fa0002a5d5c51b.ta,444)
ifeq ($(GP_TESTS),1)
	$(call add-file,/system/lib/optee_armtz/534d4152-542d-4353-4c542d54412d3031.ta,optee_test/out/ta/GP_TTA_TCF/534d4152-542d-4353-4c542d54412d3031.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-542d-4353-4c542d54412d4552.ta,optee_test/out/ta/GP_TTA_answerErrorTo_Invoke/534d4152-542d-4353-4c542d54412d4552.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-542d-4353-4c542d54412d5354.ta,optee_test/out/ta/GP_TTA_testingClientAPI/534d4152-542d-4353-4c542d54412d5354.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-542d-4353-4c542d54412d5355.ta,optee_test/out/ta/GP_TTA_answerSuccessTo_OpenSession_Invoke/534d4152-542d-4353-4c542d54412d5355.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-4c53-41524954484d4554.ta,optee_test/out/ta/GP_TTA_Arithmetical/534d4152-5443-4c53-41524954484d4554.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-4d4c54494e535443.ta,optee_test/out/ta/GP_TTA_TCF_MultipleInstanceTA/534d4152-5443-534c-4d4c54494e535443.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-53474c494e535443.ta,optee_test/out/ta/GP_TTA_TCF_SingleInstanceTA/534d4152-5443-534c-53474c494e535443.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-5441544346494341.ta,optee_test/out/ta/GP_TTA_TCF_ICA/534d4152-5443-534c-5441544346494341.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-5443525950544f31.ta,optee_test/out/ta/GP_TTA_Crypto/534d4152-5443-534c-5443525950544f31.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-5444415441535431.ta,optee_test/out/ta/GP_TTA_DS/534d4152-5443-534c-5444415441535431.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-54455252544f4f53.ta,optee_test/out/ta/GP_TTA_answerErrorTo_OpenSession/534d4152-5443-534c-54455252544f4f53.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-544f53345041524d.ta,optee_test/out/ta/GP_TTA_check_OpenSession_with_4_parameters/534d4152-5443-534c-544f53345041524d.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-5454434649434132.ta,optee_test/out/ta/GP_TTA_TCF_ICA2/534d4152-5443-534c-5454434649434132.ta,444)
	$(call add-file,/system/lib/optee_armtz/534d4152-5443-534c-5f54494d45415049.ta,optee_test/out/ta/GP_TTA_Time/534d4152-5443-534c-5f54494d45415049.ta,444)
endif

install-aes-perf: | adb-init
	$(call add-file,/system/bin/aes-perf,aes-perf/libs/arm64-v8a/aes-perf,755)
	$(call add-file,/system/lib/optee_armtz/e626662e-c0e2-485c-b8c809fbce6edf3d.ta,aes-perf/out/ta/e626662e-c0e2-485c-b8c809fbce6edf3d.ta,444)

install-sha-perf: | adb-init
	$(call add-file,/system/bin/sha-perf,sha-perf/libs/arm64-v8a/sha-perf,755)
	$(call add-file,/system/lib/optee_armtz/614789f2-39c0-4ebf-b23592b32ac107ed.ta,sha-perf/out/ta/614789f2-39c0-4ebf-b23592b32ac107ed.ta,444)
